This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

- Pay special attention to the Repository Instruction. These contain important context and guidelines specific to this project.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: components/preview/**, stores/previewStore.ts, stores/documentStore.ts, stores/createDocumentStore.ts, libs/utils/previewUtils.ts, libs/reactive-artboard/renderer/**, libs/reactive-artboard/components/Page.tsx, libs/reactive-artboard/constants/page.ts, libs/reactive-artboard/store/**, libs/reactive-artboard/mappers/resume.ts, libs/reactive-artboard/adapters/resumeData.ts, libs/reactive-artboard/index.ts, libs/reactive-artboard/types.ts, app/(app)/editor/[id]/page.tsx, components/editor/EditorLayout.tsx, package.json, tsconfig.json
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
app/
  (app)/
    editor/
      [id]/
        page.tsx
components/
  editor/
    EditorLayout.tsx
  preview/
    ArtboardFrame.tsx
    CoverLetterLivePreview.tsx
    index.ts
    LivePreview.tsx
    PageNavigation.tsx
    PreviewContainer.tsx
    PreviewControls.tsx
    PreviewError.tsx
    PreviewSkeleton.tsx
    UnifiedStreamOverlay.tsx
    ViewportSelector.tsx
    ZoomControl.tsx
libs/
  reactive-artboard/
    adapters/
      resumeData.ts
    components/
      Page.tsx
    constants/
      page.ts
    mappers/
      resume.ts
    renderer/
      ArtboardRenderer.tsx
    store/
      artboard.ts
    index.ts
    types.ts
  utils/
    previewUtils.ts
stores/
  createDocumentStore.ts
  documentStore.ts
  previewStore.ts
package.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/preview/PageNavigation.tsx">
import { ChevronLeft, ChevronRight } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { usePreviewStore } from '@/stores/previewStore'
</file>

<file path="components/preview/PreviewControls.tsx">
import { ZoomControl } from './ZoomControl'
import { PageNavigation } from './PageNavigation'
import { ViewportSelector } from './ViewportSelector'
export function PreviewControls(): React.ReactElement
</file>

<file path="components/preview/PreviewError.tsx">
import { AlertTriangle } from 'lucide-react'
import { Button } from '@/components/ui/button'
interface PreviewErrorProps {
  children: React.ReactNode
  fallback?: React.ReactNode
}
interface PreviewErrorState {
  hasError: boolean
  error?: Error
  errorInfo?: React.ErrorInfo
}
⋮----
constructor(props: PreviewErrorProps)
static getDerivedStateFromError(error: Error): PreviewErrorState
componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void
</file>

<file path="components/preview/PreviewSkeleton.tsx">

</file>

<file path="components/preview/ViewportSelector.tsx">
import { Monitor, Tablet, Smartphone, Printer } from 'lucide-react'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { usePreviewStore } from '@/stores/previewStore'
export function ViewportSelector(): React.ReactElement
</file>

<file path="libs/reactive-artboard/adapters/resumeData.ts">
import type { ResumeJson, SkillGroup } from '@/types/resume'
import { deepClone } from '../utils/deepClone'
import {
  defaultResumeData,
  defaultMetadata,
  type ResumeData,
  type SectionKey,
} from '../schema'
⋮----
export function mapResumeJsonToResumeData(resume: ResumeJson): ResumeData
function populateBasics(data: ResumeData, resume: ResumeJson)
function populateSummary(data: ResumeData, resume: ResumeJson)
function populateExperience(data: ResumeData, resume: ResumeJson)
function populateEducation(data: ResumeData, resume: ResumeJson)
function populateProjects(data: ResumeData, resume: ResumeJson)
function populateSkills(data: ResumeData, resume: ResumeJson)
function mapSkillGroup(group: SkillGroup)
function populateLanguages(data: ResumeData, resume: ResumeJson)
function populateCertifications(data: ResumeData, resume: ResumeJson)
function populateAwards(data: ResumeData, resume: ResumeJson)
function populateProfiles(data: ResumeData, resume: ResumeJson)
function populateExtras(data: ResumeData, resume: ResumeJson)
function populateMetadata(data: ResumeData, resume: ResumeJson)
function finalizeVisibility(data: ResumeData)
⋮----
const updateSection = (section:
⋮----
function normalizeLayout(layout?: string[][][]): string[][][]
function formatDateRange(start?: string, end?: string | null): string
⋮----
const format = (value?: string | null) =>
⋮----
function formatYear(value?: string | null): string
function parseYearMonth(value?: string | null): Date | null
function buildRichList(items: string[]): string
function joinLocation(location?: ResumeJson['profile']['location']): string
function extractScore(details?: string[]): string
function toArray<T>(value?: T[] | null): T[]
function clamp(value: number, min: number, max: number): number
function generateId(): string
function escapeHtml(value: string): string
</file>

<file path="libs/reactive-artboard/constants/page.ts">
export type PageFormat = keyof typeof PAGE_SIZE_MM
⋮----
export function normalizePageFormat(format: string | undefined | null): PageFormat
</file>

<file path="libs/reactive-artboard/store/artboard.ts">
import { create } from 'zustand'
import { defaultResumeData } from '../schema'
import type { ResumeData } from '../schema'
import { deepClone } from '../utils/deepClone'
export type ArtboardStore = {
  resume: ResumeData
  setResume: (resume: ResumeData) => void
}
⋮----
export const setArtboardResume = (resume: ResumeData) =>
export const resetArtboardResume = () =>
</file>

<file path="libs/utils/previewUtils.ts">
export interface ScrollPosition {
  scrollTop: number
  scrollLeft: number
  timestamp: number
}
export function batchRAF(callback: () => void): () => void
⋮----
const execute = () =>
⋮----
export function saveScrollPosition(container: HTMLElement): ScrollPosition
export function restoreScrollPosition(
  container: HTMLElement,
  position: ScrollPosition
): void
export function calculatePages(
  content: HTMLElement,
  pageHeight: number = 1056
): number
export function measureUpdateTime(label: string, fn: () => void): void
export function debounce<T extends (...args: any[]) => any>(
  fn: T,
  delay: number
): T &
export function throttle<T extends (...args: any[]) => any>(
  fn: T,
  delay: number
): T
</file>

<file path="components/preview/index.ts">

</file>

<file path="components/preview/ZoomControl.tsx">
import { Minus, Plus, ZoomIn } from 'lucide-react'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Button } from '@/components/ui/button'
import { usePreviewStore, ZOOM_LEVELS } from '@/stores/previewStore'
export function ZoomControl(): React.ReactElement
⋮----
const handleSelect = (value: string) =>
⋮----
<SelectItem key=
⋮----
onClick=
</file>

<file path="libs/reactive-artboard/components/Page.tsx">
import { cn } from '../utils'
import { useArtboardStore } from '../store/artboard'
import {
  DEFAULT_PAGE_FORMAT,
  MM_TO_PX,
  PAGE_SIZE_MM,
  normalizePageFormat,
  type PageFormat,
} from '../constants/page'
type PageProps = {
  mode?: 'preview' | 'builder'
  pageNumber: number
  children: React.ReactNode
}
</file>

<file path="libs/reactive-artboard/index.ts">

</file>

<file path="stores/previewStore.ts">
import { create } from 'zustand'
import {
  DEFAULT_PAGE_FORMAT,
  MM_TO_PX,
  PAGE_SIZE_MM,
  type PageFormat,
} from '@/libs/reactive-artboard/constants/page'
⋮----
const clampZoom = (value: number): number
export type ViewportMode = 'desktop' | 'tablet' | 'mobile' | 'print'
interface PreviewState {
  zoomLevel: number
  lastManualZoom: number
  isFitToWidth: boolean
  currentPage: number
  totalPages: number
  viewport: ViewportMode
  isFullscreen: boolean
  pendingScrollPage: number | null
  setZoom: (level: number) => void
  stepZoom: (direction: 1 | -1) => void
  resetZoom: () => void
  setFitToWidth: (enabled: boolean) => void
  applyFitZoom: (level: number) => void
  nextPage: () => void
  previousPage: () => void
  goToPage: (page: number) => void
  syncCurrentPage: (page: number) => void
  clearPendingScroll: () => void
  setViewport: (mode: ViewportMode) => void
  toggleFullscreen: () => void
  setTotalPages: (total: number) => void
  canZoomIn: () => boolean
  canZoomOut: () => boolean
  canNextPage: () => boolean
  canPreviousPage: () => boolean
}
</file>

<file path="components/preview/ArtboardFrame.tsx">
import { createRoot, Root } from 'react-dom/client'
import { ArtboardRenderer, ArtboardDocument } from '@/libs/reactive-artboard'
type PageOffsetsListener = (offsets: number[]) => void
type FrameMetrics = { offsets: number[]; pageWidth: number; pageHeight: number }
type FrameMetricsListener = (metrics: FrameMetrics) => void
interface ArtboardFrameProps {
  document: ArtboardDocument
  onPagesMeasured?: PageOffsetsListener
  onFrameMetrics?: FrameMetricsListener
}
export function ArtboardFrame(
⋮----
const measurePages = () =>
const updateHeight = () =>
</file>

<file path="components/preview/UnifiedStreamOverlay.tsx">
import { Loader2 } from 'lucide-react'
import { useUnifiedAIStore } from '@/stores/unifiedAIStore'
import { useShallow } from 'zustand/react/shallow'
export function UnifiedStreamOverlay(): React.ReactElement | null
</file>

<file path="libs/reactive-artboard/mappers/resume.ts">
import type { ResumeJson, SkillGroup, ResumeAppearance } from '@/types/resume'
import { createDefaultAppearance, createDefaultLayout } from '@/types/resume'
import { ArtboardDocument, ArtboardRichTextBlock, ArtboardSection, ArtboardMetadata } from '../types'
import { DEFAULT_PAGE_FORMAT, normalizePageFormat } from '../constants/page'
⋮----
export function mapResumeToArtboardDocument(resume: ResumeJson): ArtboardDocument
function createMetadata(resume: ResumeJson): ArtboardMetadata
function resolveLayout(resume: ResumeJson): string[][][]
function appearanceTemplate(resume: ResumeJson): string
function createParagraphBlock(text: string): ArtboardRichTextBlock
function createListBlock(items: string[]): ArtboardRichTextBlock
function createOptionalListBlock(items?: string[]): ArtboardRichTextBlock[] | undefined
function joinBlocks(...groups: (string[] | undefined)[]): ArtboardRichTextBlock[] | undefined
function flattenSkillGroups(groups: SkillGroup[])
function formatLanguageLine(name?: string, level?: string): string
function buildCustomSections(resume: ResumeJson): ArtboardSection[]
function htmlToArtboardBlocks(html: string): ArtboardRichTextBlock[]
function stripHtml(value: string): string
function decodeEntities(value: string): string
</file>

<file path="libs/reactive-artboard/renderer/ArtboardRenderer.tsx">
import { ArtboardDocument } from '../types'
import { getTemplateRenderer } from '../templates'
import { buildArtboardStyles } from '../styles'
import { Page } from '../components/Page'
import type { SectionKey } from '../schema'
type ArtboardRendererProps = {
  document: ArtboardDocument
}
</file>

<file path="libs/reactive-artboard/types.ts">
export type ArtboardColorScheme = {
  background: string
  text: string
  primary: string
}
export type ArtboardTypography = {
  fontFamily: string
  fontSize: number
  lineHeight: number
}
import type { PageFormat } from './constants/page'
export type ArtboardMetadata = {
  colors: ArtboardColorScheme
  typography: ArtboardTypography
  page: {
    format: PageFormat
    margin: number
    showPageNumbers: boolean
  }
  customCss?: string
}
export type ArtboardLink = {
  label: string
  url: string
}
export type ArtboardProfile = {
  fullName: string
  headline?: string
  summary?: string
  email?: string
  phone?: string
  location?: string
  links?: ArtboardLink[]
}
export type ArtboardSectionBase = {
  id: string
  title: string
  visible: boolean
}
export type ArtboardRichTextBlock = {
  type: 'paragraph' | 'list'
  content: string[]
}
export type ArtboardExperienceItem = {
  company: string
  role: string
  location?: string
  startDate?: string
  endDate?: string
  summary?: ArtboardRichTextBlock[]
}
export type ArtboardEducationItem = {
  school: string
  degree: string
  field?: string
  startDate?: string
  endDate?: string
  summary?: ArtboardRichTextBlock[]
}
export type ArtboardSkillItem = {
  label: string
  level?: number
}
export type ArtboardSection =
  | (ArtboardSectionBase & { type: 'summary'; blocks: ArtboardRichTextBlock[] })
  | (ArtboardSectionBase & { type: 'experience'; items: ArtboardExperienceItem[] })
  | (ArtboardSectionBase & { type: 'education'; items: ArtboardEducationItem[] })
  | (ArtboardSectionBase & { type: 'skills'; items: ArtboardSkillItem[] })
  | (ArtboardSectionBase & { type: 'custom'; blocks: ArtboardRichTextBlock[] })
export type ArtboardDocument = {
  template: string
  profile: ArtboardProfile
  sections: ArtboardSection[]
  metadata: ArtboardMetadata
  layout: string[][][]
}
</file>

<file path="stores/createDocumentStore.ts">
import { create, StoreApi, UseBoundStore } from 'zustand'
import { temporal, TemporalState } from 'zundo'
import isEqual from 'lodash/isEqual'
import type { ZodType, ZodTypeDef } from 'zod'
export interface DocumentStoreConfig<T> {
  apiEndpoint: string
  schemaValidator: ZodType<T, ZodTypeDef, any>
  defaultDocument?: () => T
}
export interface DocumentState<T> {
  document: T | null
  documentId: string | null
  documentVersion: number | null
  documentTitle: string | null
  isLoading: boolean
  originalDocument: T | null
  isDirty: boolean
  isSaving: boolean
  lastSaved: Date | null
  saveError: Error | null
  loadDocument: (id: string) => Promise<void>
  updateDocument: (updates: Partial<T>) => void
  setTitle: (title: string) => void
  saveDocument: () => Promise<void>
  resetChanges: () => void
  clearDocument: () => void
  hasChanges: boolean
}
⋮----
export function createDocumentStore<T extends Record<string, any>>(
  config: DocumentStoreConfig<T>
): UseBoundStore<StoreApi<DocumentState<T> & TemporalState<Partial<DocumentState<T>>>>>
export function createTemporalHook<T extends Record<string, any>>(
  useStore: UseBoundStore<StoreApi<DocumentState<T> & TemporalState<Partial<DocumentState<T>>>>>
)
export function createPreviewSelector<T>()
export function createMetadataSelector<T>()
</file>

<file path="stores/documentStore.ts">
import { createDocumentStore, createTemporalHook, createPreviewSelector, createMetadataSelector } from './createDocumentStore'
import { ResumeJsonSchema } from '@/libs/validation/resume'
import type { ResumeJson } from '@/types/resume'
</file>

<file path="components/editor/EditorLayout.tsx">
import { cn } from '@/libs/utils'
export interface EditorLayoutProps {
  children: React.ReactNode
  sidebar?: React.ReactNode
  header?: React.ReactNode
  sidebarClassName?: string
  sidebarMobileVisible?: boolean
}
</file>

<file path="components/preview/CoverLetterLivePreview.tsx">
import { useShallow } from 'zustand/react/shallow'
import { useCoverLetterStore } from '@/stores/coverLetterStore'
import { PreviewContainer } from './PreviewContainer'
import { PreviewError } from './PreviewError'
import { PreviewSkeleton } from './PreviewSkeleton'
import { PreviewControls } from './PreviewControls'
import { saveScrollPosition, restoreScrollPosition } from '@/libs/utils/previewUtils'
import type { CoverLetterJson } from '@/types/cover-letter'
import { ArtboardFrame } from './ArtboardFrame'
import { mapCoverLetterToArtboardDocument } from '@/libs/reactive-artboard'
import { usePreviewStore } from '@/stores/previewStore'
import type { PageFormat } from '@/libs/reactive-artboard/constants/page'
interface CoverLetterLivePreviewProps {
  documentId?: string
  showControls?: boolean
}
</file>

<file path="components/preview/PreviewContainer.tsx">
import { usePreviewStore } from '@/stores/previewStore'
import { cn } from '@/libs/utils'
import {
  DEFAULT_PAGE_FORMAT,
  MM_TO_PX,
  PAGE_SIZE_MM,
  normalizePageFormat,
  type PageFormat,
} from '@/libs/reactive-artboard/constants/page'
import { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'
import type { ReactZoomPanPinchRef } from 'react-zoom-pan-pinch'
interface PreviewContainerProps {
  children: React.ReactNode
  className?: string
  pageFormat?: PageFormat
  pageOffsets?: number[]
  pageWidthPxOverride?: number
  pageHeightPxOverride?: number
}
⋮----
// Drag state removed; panning handled by react-zoom-pan-pinch
⋮----
const handleKeyDown = (event: KeyboardEvent) =>
⋮----
const handleScroll = () =>
⋮----
className=
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "baseUrl": ".",
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noImplicitAny": true,
    "jsx": "preserve",
    "paths": {
      "@/*": [
        "./*"
      ],
      "@dnd-kit/core": [
        "libs/dnd-kit/core"
      ],
      "@dnd-kit/sortable": [
        "libs/dnd-kit/sortable"
      ],
      "pdf-lib": [
        "libs/vendor/pdf-lib"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "app/**/*.ts",
    "app/**/*.tsx",
    "components/**/*.ts",
    "components/**/*.tsx",
    "libs/ai/**/*.ts",
    "libs/sanitization/**/*.ts",
    "libs/validation/**/*.ts",
    "libs/repositories/**/*.ts",
    "libs/exporters/**/*.ts",
    "stores/**/*.ts",
    "types/**/*.ts",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "agents",
    "ai_docs",
    "libs/reactive-artboard",
    "libs/reactive-artboard/**/*"
  ]
}
</file>

<file path="app/(app)/editor/[id]/page.tsx">
import { useParams } from 'next/navigation'
import {
  User,
  FileText,
  Briefcase,
  GraduationCap,
  FolderGit2,
  Code,
  Award,
  Trophy,
  Languages,
  Plus,
  History,
  Eye,
  Palette,
  BarChart3
} from 'lucide-react'
import { useToast } from '@/hooks/use-toast'
import { EditorLayout } from '@/components/editor/EditorLayout'
import { EditorHeader } from '@/components/editor/EditorHeader'
import { EditorSidebar } from '@/components/editor/EditorSidebar'
import { EditorForm } from '@/components/editor/EditorForm'
import { SectionAccordion } from '@/components/editor/SectionAccordion'
import { VersionHistory } from '@/components/editor/VersionHistory'
import { Button } from '@/components/ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { LivePreview } from '@/components/preview'
import { UnifiedStreamOverlay } from '@/components/preview/UnifiedStreamOverlay'
import { PreviewControls } from '@/components/preview/PreviewControls'
import { CustomizationPanel } from '@/components/customization/CustomizationPanel'
import UnifiedAITool from '@/components/ai/UnifiedAITool'
import { useDocumentStore, useTemporalStore } from '@/stores/documentStore'
import type { ResumeJson } from '@/types/resume'
import type { SaveStatus } from '@/components/editor/EditorHeader'
import { ProfileSection } from '@/components/editor/sections/ProfileSection'
import { SummarySection } from '@/components/editor/sections/SummarySection'
import { WorkSection } from '@/components/editor/sections/WorkSection'
import { EducationSection } from '@/components/editor/sections/EducationSection'
import { ProjectsSection } from '@/components/editor/sections/ProjectsSection'
import { SkillsSection } from '@/components/editor/sections/SkillsSection'
import { CertificationsSection } from '@/components/editor/sections/CertificationsSection'
import { AwardsSection } from '@/components/editor/sections/AwardsSection'
import { LanguagesSection } from '@/components/editor/sections/LanguagesSection'
import { ExtrasSection } from '@/components/editor/sections/ExtrasSection'
import { ScorePanel } from '@/components/score/ScorePanel'
⋮----
const handleIntersection = (entries: IntersectionObserverEntry[]) =>
⋮----
const handleChange = (data: ResumeJson): void =>
const handleSubmit = async (): Promise<void> =>
const handleRestoreVersion = async (versionNumber: number): Promise<void> =>
const handleSectionClick = (sectionId: string): void =>
⋮----
onTitleChange=
⋮----
<Tabs value=
</file>

<file path="components/preview/LivePreview.tsx">
import { useShallow } from 'zustand/react/shallow'
import { useDocumentStore } from '@/stores/documentStore'
import { PreviewContainer } from './PreviewContainer'
import { PreviewError } from './PreviewError'
import { PreviewSkeleton } from './PreviewSkeleton'
import { PreviewControls } from './PreviewControls'
import { saveScrollPosition, restoreScrollPosition } from '@/libs/utils/previewUtils'
import type { ResumeJson } from '@/types/resume'
import { ArtboardFrame } from './ArtboardFrame'
import { mapResumeToArtboardDocument, mapResumeJsonToResumeData, useArtboardStore } from '@/libs/reactive-artboard'
import { usePreviewStore } from '@/stores/previewStore'
import type { PageFormat } from '@/libs/reactive-artboard/constants/page'
interface LivePreviewProps {
  documentId?: string
  showControls?: boolean
}
export function LivePreview(
⋮----
setPageOffsets(offsets)
setPageSizePx(
</file>

<file path="package.json">
{
  "name": "resumepair",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "postbuild": "next-sitemap",
    "start": "next start",
    "lint": "next lint",
    "artboard:css": "tailwindcss -i ./libs/reactive-artboard/styles/tailwind.css -c ./tailwind.artboard.config.js -o ./public/artboard/tailwind.css --minify",
    "tree": "node scripts/tree.js",
    "thumbs:gen": "BASE_URL=http://localhost:3000 node scripts/generate-thumbnails.mjs"
  },
  "overrides": {
    "prismjs": "^1.30.0",
    "refractor": "^4.8.1",
    "brace-expansion": "^2.0.2",
    "braces": "^3.0.3",
    "cross-spawn": "^7.0.5",
    "micromatch": "^4.0.8",
    "webpack": "^5.94.0"
  },
  "dependencies": {
    "@ai-sdk/google": "^2.0.17",
    "@headlessui/react": "^1.7.18",
    "@hookform/resolvers": "^5.2.2",
    "@mdx-js/loader": "^2.3.0",
    "@mdx-js/react": "^2.3.0",
    "@next/mdx": "^13.5.6",
    "@radix-ui/react-accordion": "^1.2.12",
    "@radix-ui/react-alert-dialog": "^1.1.15",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.3",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.8",
    "@radix-ui/react-scroll-area": "^1.2.10",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toast": "^1.2.15",
    "@sparticuz/chromium": "^140.0.0",
    "@supabase/ssr": "^0.7.0",
    "@supabase/supabase-js": "^2.50.0",
    "@types/lodash": "^4.17.20",
    "ai": "^5.0.59",
    "axios": "^1.7.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "crisp-sdk-web": "^1.0.22",
    "date-fns": "^4.1.0",
    "eslint": "8.47.0",
    "eslint-config-next": "13.4.19",
    "form-data": "^4.0.0",
    "isomorphic-dompurify": "^2.28.0",
    "lodash": "^4.17.21",
    "lucide-react": "^0.532.0",
    "next": "^14.2.31",
    "next-sitemap": "^4.2.3",
    "next-themes": "^0.4.6",
    "nextjs-toploader": "^1.6.11",
    "nodemailer": "^6.9.13",
    "puppeteer-core": "^24.23.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-hook-form": "^7.63.0",
    "react-hot-toast": "^2.4.1",
    "react-syntax-highlighter": "^15.5.0",
    "react-tooltip": "^5.26.3",
    "react-zoom-pan-pinch": "^3.7.0",
    "resend": "^4.0.1",
    "stripe": "^13.11.0",
    "tailwind-merge": "^3.3.1",
    "zod": "^3.25.76",
    "zundo": "^2.3.0",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@types/jest": "^29.5.12",
    "@types/mdx": "^2.0.12",
    "@types/mongoose": "^5.11.97",
    "@types/node": "^20.12.2",
    "@types/react": "^18.2.73",
    "@types/react-dom": "^18.2.23",
    "@types/react-syntax-highlighter": "^15.5.11",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.4.3"
  }
}
</file>

</files>

<instruction>
# Preview System Refactoring - Context Pack

## Problem Statement

The preview system in the ResumePair application is fundamentally broken and needs a complete overhaul. The application shows a split-screen layout:
- **Left side**: Form-based editor for inputting resume information
- **Right side**: Live preview showing the formatted resume

### Critical Issues

1. **Mouse/Scroll Events Apply to Whole Page**
   - Scrolling inside the preview container affects the entire application page
   - Zoom gestures (pinch, mouse wheel) are not isolated to the preview area
   - Pan/drag interactions bleed out to the parent page

2. **Multi-Page Logic Broken**
   - Cannot scroll to subsequent pages when content overflows first page
   - Page navigation appears stuck
   - Initially shows only first two sections, zoomed in and fixed
   - No way to navigate to page 2, 3, etc. even when content exists

3. **Preview Container Fixed/Locked**
   - Preview appears "frozen" after initial load
   - Cannot scroll within the preview viewport
   - Cannot zoom or adjust view properly
   - Preview does not respond to user interactions as expected

4. **No Proper Viewport Isolation**
   - The preview content is not properly contained
   - Scroll boundaries are not respected
   - Transform/zoom operations affect parent containers

## Current Implementation Overview

### Architecture Components

**Preview Component Hierarchy:**
```
LivePreview (components/preview/LivePreview.tsx)
├── PreviewControls (zoom, page nav, viewport selector)
└── PreviewContainer (components/preview/PreviewContainer.tsx)
    └── TransformWrapper (react-zoom-pan-pinch)
        └── TransformComponent
            └── ArtboardFrame (components/preview/ArtboardFrame.tsx)
                └── iframe
                    └── ArtboardRenderer (libs/reactive-artboard/renderer/ArtboardRenderer.tsx)
                        └── Page components (libs/reactive-artboard/components/Page.tsx)
```

**Key Technical Details:**

1. **Iframe Isolation**: Uses iframe with `scrolling="no"` to isolate artboard styles
2. **react-zoom-pan-pinch**: Third-party library for zoom/pan functionality
3. **Dynamic Height**: iframe height calculated from `documentElement.scrollHeight`
4. **Page Measurement**: Uses `data-page` attributes and `offsetTop` to track page positions
5. **State Management**:
   - `previewStore.ts` - zoom, pagination, viewport state
   - `documentStore.ts` - resume data via Zustand + zundo (undo/redo)

### Identified Problems in Current Code

1. **PreviewContainer.tsx (lines 217-251)**:
   - Container has `overflow-auto` which competes with TransformWrapper
   - TransformComponent panning is conditionally disabled based on zoom
   - Scroll events handled both by container AND transform wrapper
   - Conflicts between native scroll and library pan behavior

2. **ArtboardFrame.tsx (lines 105-117)**:
   - iframe has `scrolling="no"` but parent container scrolls
   - Height is dynamically set but may not account for transform scaling
   - No communication about scroll boundaries to parent

3. **LivePreview.tsx (lines 41-42)**:
   - `pageOffsets` state tracks page positions
   - But scrolling is handled by PreviewContainer, not LivePreview
   - Disconnect between offset tracking and actual scroll behavior

4. **Page.tsx (lines 31-32)**:
   - Fixed height with `overflow: hidden` may clip content
   - No pagination break logic visible

## Scope of Changes

We are open to **complete reimplementation** if necessary. Priority is getting the preview working correctly over preserving existing code.

### What Needs to Work

1. **Isolated Scroll/Zoom**:
   - All mouse interactions (scroll, zoom, pan, pinch) must be contained within preview area
   - Parent page must not scroll/zoom when interacting with preview

2. **Multi-Page Navigation**:
   - Must be able to scroll through all pages of content
   - Page boundaries should be visible and navigable
   - Page navigation controls should accurately reflect current page
   - Should handle dynamic content that flows to 2, 3, 4+ pages

3. **Zoom Controls**:
   - Zoom in/out should work smoothly
   - Fit-to-width mode should properly calculate and apply zoom
   - Zoom should not break scrolling or pagination

4. **Performance**:
   - Preview updates must meet <120ms budget (per architecture docs)
   - RAF batching for state updates
   - Efficient page offset calculations

## Evidence & Constraints

### Tech Stack (FIXED - Cannot Change)
- Next.js 14 + React 18 + TypeScript (strict mode)
- Zustand + zundo for state management
- Tailwind CSS + shadcn/ui components
- Current dependency: `react-zoom-pan-pinch` v3.7.0

### Performance Budgets
- Preview update: p95 ≤ 120ms (keystroke to paint)
- Template switch: ≤ 200ms

### Design Constraints
- Must maintain iframe isolation for artboard styles
- Must support A4 and Letter page formats
- Must work on desktop (primary) and tablet viewports
- Preview is 50% of screen width in editor layout (EditorLayout.tsx)

### Related Files Context
- `app/(app)/editor/[id]/page.tsx` - Main editor page layout
- `components/editor/EditorLayout.tsx` - 50/50 split sidebar/preview layout
- `stores/previewStore.ts` - Zoom, pagination, viewport state
- `stores/documentStore.ts` - Resume data (Zustand + zundo)
- `libs/utils/previewUtils.ts` - RAF batching, scroll position utils
- `libs/reactive-artboard/constants/page.ts` - Page size constants (A4/Letter)

## What We Need From You

**Deliverable**: Complete refactored preview implementation OR detailed technical plan

**Format**:
- If providing code: Unified diff format rooted at repo root
- If providing plan: Step-by-step refactoring guide with specific code changes

**Approach Options**:
1. **Fix existing architecture**: Identify and patch the scroll/zoom/pagination issues
2. **Replace react-zoom-pan-pinch**: Use alternative library or custom implementation
3. **Redesign container structure**: New component hierarchy that properly isolates interactions
4. **Hybrid**: Keep iframe isolation but redesign scroll/zoom handling

**Requirements**:
- Explain the root cause(s) of current issues
- Provide concrete implementation (code diffs or detailed pseudocode)
- Ensure solution handles multi-page documents (2-5 pages typical)
- Maintain performance budgets (<120ms updates)
- Keep iframe-based style isolation

**If You Need More Context**:
List exact file paths you need to see. We will re-pack with those additions. Available:
- Any file from the full file tree (run `git ls-files` to see all)
- Template implementations (`libs/reactive-artboard/templates/*.tsx`)
- Additional component implementations
- API routes or server-side rendering logic

## Existing Logs/Symptoms (From User Report)

> "Any mouse moment like scroll, zoom, pinch when I try to do in the preview it applies to the whole page."

> "I can't scroll really to the next section. It's like whenever I first open the page I get to see the first two sections zoomed in. That's it. It's fixed."

> "I can't really move. I can't scroll. If the content gets filled in the first page I can't really go to the second page."

## Success Criteria

After implementation:
1. ✅ Scroll inside preview container stays within preview, does not affect parent page
2. ✅ Zoom/pinch gestures isolated to preview area
3. ✅ Can scroll through all pages when content overflows
4. ✅ Page navigation accurately reflects current visible page
5. ✅ Fit-to-width mode works correctly
6. ✅ Preview updates within <120ms performance budget
7. ✅ Works with dynamic content (1-5 pages typical range)

</instruction>
